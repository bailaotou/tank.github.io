package test;
public class Map {
	public static void changeMap(int difficulty) {
		switch (difficulty) {
		case 0:
			for (int i = 0; i < 10; i++) {
				Center.walls.add(new Wall(50 + 30 * i, 300));
				Center.walls.add(new Wall(250, 50 + 30 * i));
				Center.walls.add(new Wall(350 + 30 * i, 100));
				Center.walls.add(new Wall(500, 180 + 30 * i));
			}
			for (int i = 0; i < 6; i++) {
				Center.hWalls.add(new HardWall(340, 240 + 30 * i));
				Center.hWalls.add(new HardWall(220 + 30 * i, 200));
			}

			break;
		case 1:
			Center.walls.clear();
			Center.hWalls.clear();
			Center.rivers.clear();
			Center.trees.clear();
			int[][] m1 = {
                    {0,0,0,4,0,0,0,2,2,2,2,2,2,0,0,0,0,0,0,},
                    {0,0,0,0,1,1,0,0,0,2,2,0,0,1,1,0,0,0,0,},
                    {0,0,0,1,1,1,1,0,0,0,4,0,1,1,1,1,0,0,0,},
                    {0,3,3,0,0,0,0,0,4,0,0,0,0,0,0,0,4,3,3,},
                    {0,3,0,0,0,4,0,0,0,0,0,0,0,0,0,0,4,0,3,},
                    {0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,},
                    {0,3,4,0,0,0,4,0,4,0,4,4,4,0,0,0,4,0,3,},
                    {0,3,0,0,0,0,4,4,4,4,0,0,4,0,0,0,0,0,3,},
                    {0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,3,},
                    {0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,},
                    {0,3,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,3,},
                    {4,0,0,0,0,4,1,1,1,1,1,1,1,4,0,0,0,0,0,},
                    {0,0,0,0,0,4,1,1,0,0,0,1,1,4,0,0,0,4,0,},
                    {0,0,0,0,0,4,1,1,0,0,0,1,1,4,0,0,0,0,0,},
                };
			for(int i = 0;i < m1.length;i++){
                for(int j = 0; j < m1[i].length; j++){
                    if(m1[i][j] == 1){// 100,127Îªx,y×ø±ê
                    	Center.walls.add(new Wall(100+30*j, 127+30*i));
                    }                       
                    if(m1[i][j] == 2){
                    	Center.hWalls.add(new HardWall(90+30*j, 33*i));
                    }
                    if(m1[i][j] == 3){
                    	Center.rivers.add(new River(82+30*j, 33*i));
                    }
                    if(m1[i][j] == 4){
                    	Center.trees.add(new Tree(98+30*j, 127+32*i));
                    }
                }
            }    
			break;
		case 2:
			Center.walls.clear();
			Center.hWalls.clear();
			Center.rivers.clear();
			Center.trees.clear();
			int[][] m2 = {
                    {0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,4,4,4,0,},
                    {0,0,1,1,1,1,0,0,0,0,0,0,0,0,4,0,1,1,0,},
                    {0,0,0,0,1,0,0,0,2,2,2,2,0,0,0,0,0,1,0,},
                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                    {0,3,0,0,0,0,0,2,2,0,0,2,2,0,0,0,4,0,3,},
                    {0,3,0,0,0,0,0,2,0,0,0,0,2,0,0,0,4,0,3,},
                    {0,3,0,0,0,0,4,1,0,0,0,0,1,4,0,0,4,0,3,},
                    {0,3,0,0,0,0,4,1,1,1,1,1,1,4,0,0,0,0,3,},
                    {0,3,0,0,0,4,4,4,4,4,4,4,4,4,4,0,0,0,3,},
                    {0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,},
                    {0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,},
                    {0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,1,1,1,0,},
                    {0,0,4,4,4,0,0,0,0,0,0,0,0,0,4,0,1,0,4,},
                };
			for(int i = 0;i < m2.length;i++){
                for(int j = 0; j < m2[i].length; j++){
                    if(m2[i][j] == 1){
                    	Center.walls.add(new Wall(90+30*j, 48+31*i));
                    }                       
                    if(m2[i][j] == 2){
                    	Center.hWalls.add(new HardWall(90+30*j, 33+33*i));
                    }
                    if(m2[i][j] == 3){
                    	Center.rivers.add(new River(90+30*j, 33*i));
                    }
                    if(m2[i][j] == 4){
                    	Center.trees.add(new Tree(90+30*j, 40+32*i));
                    }
                }
            }    
			break;
		case 3:
			Center.walls.clear();
			Center.hWalls.clear();
			Center.rivers.clear();
			Center.trees.clear();
			int[][] m3 = {
                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                    {0,1,1,1,1,4,4,4,4,4,4,4,4,4,1,1,1,1,0,},
                    {0,1,0,0,0,0,0,0,4,4,4,4,0,0,0,0,0,1,0,},
                    {0,1,0,0,0,0,0,0,4,4,4,4,0,0,0,0,0,1,0,},
                    {0,1,0,0,0,0,1,1,4,4,4,4,1,1,0,0,0,1,0,},
                    {0,4,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,4,0,},
                    {0,4,4,4,4,4,4,1,0,0,0,0,1,4,4,4,4,4,0,},
                    {0,4,4,4,4,4,4,1,0,0,0,0,1,4,4,4,4,4,0,},
                    {0,4,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,4,0,},
                    {0,1,0,0,0,0,1,1,4,4,4,4,1,1,0,0,0,1,0,},
                    {0,1,0,0,0,0,0,0,4,4,4,4,0,0,0,0,0,1,0,},
                    {0,1,0,0,0,0,0,0,4,4,4,4,0,0,0,0,0,1,0,},
                    {0,1,1,1,1,4,4,4,4,4,4,4,4,4,1,1,1,1,0,},
                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                };
			for(int i = 0;i < m3.length;i++){
                for(int j = 0; j < m3[i].length; j++){
                    if(m3[i][j] == 1){
                    	Center.walls.add(new Wall(110+30*j, 50+31*i));
                    }                       
                    if(m3[i][j] == 2){
                    	Center.hWalls.add(new HardWall(100+30*j, 33*i));
                    }
                    if(m3[i][j] == 3){
                    	Center.rivers.add(new River(80+30*j, 33*i));
                    }
                    if(m3[i][j] == 4){
                    	Center.trees.add(new Tree(109+30*j, 42+32*i));
                    }
                }
            }    
			break;
		default : break;
		}
	}
}